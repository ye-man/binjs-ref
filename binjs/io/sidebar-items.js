initSidebarItems({"enum":[["DictionaryPlacement","A strategy for placing the dictionary."],["Format","All the formats available for encoding/decoding."],["TokenReaderError",""],["TokenWriterError",""]],"macro":[["for_field_in_per_static","A macro used to generate code that will operate on all fields of a `PerStaticKind`."],["for_field_in_user_extensible","A macro used to generate code that will operate on all fields of a `PerUserExtensibleKind`."],["print_file_structure","Prints the structural interpretation of the data read after the last time this macro is called."]],"mod":[["binjs_json","A format for generating invalid file, to test decoder implementation."],["bytes","Byte-level utilities for writing token readers/writers. Tools for manipulating byte-level data."],["entropy","An encoding using entropy coding. A format based on Entropy coding"],["escaped_wtf8",""],["io","Definition of TokenReader/TokenWriter traits. Mid-level API used to write individual components of an AST tree to a stream of tokens."],["multipart","An optimization of TokenReader/TokenWriter, designed to minimize the size of the file. A multipart format, in which each part can be compressed independently."],["simple","A simple implementation of TokenReader/TokenWriter, designed specifically to help debug implementations of grammar encoders/decoders. Minimal implementation of encoding/decoding to binary. Used for testing purposes. Not meant to be included in release builds."],["xml","A trivial exporter to xml."]],"struct":[["CompressionTarget","Instructions for a single section (grammar, strings, tree, ...)"]],"trait":[["FormatProvider","Command-line management for a format"]]});